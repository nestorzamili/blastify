generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model user {
  id                String    @id @default(uuid())
  email             String    @unique
  password          String
  name              String
  role              String
  isVerified        Boolean   @default(false)
  verificationToken String?
  verifyExpires     DateTime?
  resetToken        String?
  resetTokenExpires DateTime?
  clients           client[]
  quota             quota?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

model client {
  id         String       @id @default(uuid())
  userId     String
  user       user         @relation(fields: [userId], references: [id], onDelete: Cascade)
  session    String?
  status     ClientStatus @default(INITIALIZING)
  lastActive DateTime?
  lastQrCode String?
  messages   message[]
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
}

model message {
  id        String        @id @default(uuid())
  clientId  String
  client    client        @relation(fields: [clientId], references: [id], onDelete: Cascade)
  number    String
  content   String
  status    MessageStatus @default(PENDING)
  mediaUrl  String?
  error     String?
  createdAt DateTime      @default(now())
}

model quota {
  id           String   @id @default(uuid())
  userId       String   @unique
  user         user     @relation(fields: [userId], references: [id], onDelete: Cascade)
  balance      Int      @default(0)
  lockedAmount Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

enum ClientStatus {
  INITIALIZING
  CONNECTED
  DISCONNECTED
  LOGOUT
}

enum MessageStatus {
  PENDING
  SENT
  FAILED
}
